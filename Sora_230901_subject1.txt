- **Git**
    - 버전관리 시스템으로, 파일 변화를 기록했다가 추후에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템
    - 파일 또는 프로젝트를 이전 상태로 되돌릴 수 있고, 시간에 따라 수정 내용 비교 가능 및 문제 추적 가능
    - 플프로젝트 전체르 스냅샷 형태로 저관리함
- **GitHub**
    - 개발자가 코드 변경을 호스팅하고 모니터링 가능한 최초 클라우드 기반의 Git 플랫폼
    - 즉, Git으로 관리하는 프로젝트를 저장 가능한 사이트 (코드 호스팅 서비스)
- **GitLab (CI/CD Tool)**
    - 개발자가 코드를 모니터링, 테스트 및 배포하는 데 도움이 되는 클라우드 기반 Git 및 DevOps 플랫폼
    - 지속적 통합/지속적 전달(CI/CD)와 데브옵스 워크플로우를 내장

- GitHub vs GitLab
    - 브랜치
        - 깃허브는 새로운 브랜치를 마스터 분기와 병합하는 것을 지지하여, 신속한 배포가 가능하고, 문제 발생 시 이전 버전으로 신속하게 복원 가능
        - 깃랩의 워크플로우는 변경한 각 세트를 마스터 브랜치와 별도의 안정적인 브랜치로 생성하며, 프로덕션과 스테이징의 분기가 최소한으로 있음
    - SW서비스
        - 깃랩은 완전한 소프트웨어 개발 솔루션을 제공하며, 올인원의 데브옵스 플랫폼. 지라(Jira), 마이크로소프트 팀즈, 슬랙, G메일 같은 애프리케이션 및 플랫폼과 통합을 제공함
        - 깃허브는 자체적으로 깃랩보다 적은 수의 소프트웨어 서비스를 제공하지만, 신 외부 프로그램 및 서비스와 통합하는 쉬운 방법을 제공

### **오픈소스 CI/CD 툴**

- **Jenkins**
    - 젠킨스는 소프트웨어 개발 시 지속적으로 통합 서비스를 제공하는 툴⇒ CI(Continuous Integration) 툴
    - 다양한 플러그인들을 활용해서 각종 자동화 작업을 처리하며, AWS 배포, 테스트, 도커 빌드 등 할게 너무 많으니 각각의 컴포넌트들을 하나의 플러그인으로 모듈화를 해놓았는데 이를 활용하여 사용함
    - 즉 일련의 자동화 작업의 순서들의 집합인 Pipeline을 통해 CI/CD 파이프라인을 구축함
- **ArgoCD**
    - GitOps를 구현하기 위한 도구 중 하나로, 쿠버네티스 애플리케션의 자동 배포(CD)를 위한 오픈소스 도구
- **Tekton**
    - Tekton Pipelines는 표준 클라우드 네이티브 CI/CD 경험과 컨테이너를 제공하는 쿠버네티스 플랫폼을 위한 CI/CD 프레임워크

구성 자동화(IaC) 툴

- **Terraform**
    - 하시코프에서 오픈소스로 개발중인 클라우드 인프라스트럭처 자동화를 지향하는 코드로서의 인프라스트럭처Infrastructure as Code, IaC 도구
    - HCL언어를 통해 인프라가 코드로 표현되고 곧 코드가 인프라이기 때문에 선언적인 특징 보유

- **Cloud formation**
    - AWS 리소스를 모델링하고 설정하여 리소스 관리 시간을 줄이고 AWS에서 실행되는 애플리케이션에 더 많은 시간을 사용하도록 해 주는 서비스
    - 필요한 모든 AWS 리소스(예: Amazon EC2 인스턴스 또는 Amazon RDS DB 인스턴스)를 설명하는 템플릿을 생성하면 CloudFormation이 해당 리소스의 프로비저닝과 구성을 담당
- **Chef**
    - 시스템 관리자가 간단하고 쉬운 방법으로 조직의 여러 서버 및 기타 장치에서 배포, 구성, 관리 및 진행 중인 작업을 자동화할 수 있는 오픈 소스 자동화 프로그램
- **Puppet**
    - 전통적으로 각 시스템에 추가 소프트웨어를 설치해야 하는 에이전트 기반 접근 방식을 선호
    - 도메인 특정 언어(Ruby 프로그래밍 언어에 대한 지식 필요)와 선언적 자동화(원하는 상태 정의)를 사용
- **Ansible**
    - 자동화 대상에 추가 소프트웨어를 설치하지 않아도 되는 더 유연한 에이전트리스 접근 방식 덕분에 사용에 용이함
    - 구성 파일 및 절차적(실행할 단계를 순서대로 정의) 자동화에 대해 사람이 읽을 수 있는 언어를 사용


### **컨테이너 런타임**

- Docker
    - One container on one host, 한개의 서버 위에 하나의 컨테이너를 실행
- Docker compose
    - multi container on one host, 한개의 서버 위에서 여러개의 컨테이너를 실행
- Docker swarm
    - Ochestration: multi container on multi host, 여러 서버에 걸쳐서, 여러 컨테이너들을 어떻게 전반적으로 관리 및 자동으로 배포할 지 등에 집중 ⇒ 쿠버네티스, ECS, Docker swarm
    - 서로다른 호스트에 있는 여러 대의 컨테이너를 하나의 묶어 마치 하나의 호스트인 것처럼 사용할 수 있도록 도와주는 컨테이너 오케스트레이션 도구

- Kubernetes
    - 컨테이너화된 워크로드와 서비스를 관리하기 위한 이식성이 있고, 확장가능한 오픈소스 플랫폼
    - 분산 시스템을 탄력적으로 실행하기 위한 프레임 워크를 제공하며, 애플리케이션의 확장과 장애 조치를 처리하고, 배포 패턴 등을 제공함. 예를 들어, 쿠버네티스는 시스템의 카나리아 배포를 쉽게 관리 가능
- Rancher
    - 컨테이너 워크로드를 보다 쉽게 관리할 수 있도록 도와주는 멀티 클러스터 관리 플랫폼
    - 1.x 버전에서는 Swarm, Kubenetes, Mesos와 같이 다양한 컨테이너 오케스트레이션을 지원했지만 2.x 버전에서는 사실상 표준이 된 Kubenetes만 지원
- ECS
    - 컨테이너화된 애플리케이션을 쉽게 배포, 관리, 스케일링할 수 있도록 도와주는 완전 관리형 컨테이너 오케스트레이션 서비스로, 완전관리형 서비스인 Amazon ECS에는 AWS 구성과 운영 모범 사례가 내장
    - AWS와 Amazon Elastic Container Registry, Docker 등의 서드 파티 도구와 통합
- EKS
    - 자체 Kubernetes 컨트롤 플레인 또는 노드를 설치, 운영 및 유지 관리할 필요 없이 AWS의 Kubernetes 실행에 사용할 수 있는 관리형 서비스로, 컨테이너화된 애플리케이션의 배포, 확장, 관리를 자동화하기 위한 오픈 소스 시스템
    - 여러 AWS 가용 영역에 걸쳐 Kubernetes 컨트롤 플레인을 실행하고 크기를 조정하여 높은 가용성 보장
    - 컨트롤 플레인은 하중에 따라 제어 영역 인스턴스의 크기를 자동으로 조정하고, 비정상 제어 영역 인스턴스를 감지하고 교체하며, 자동화된 버전 업데이트 및 패치를 제공
    - 또한 여러 AWS 서비스와 통합되어 다음 기능을 포함한 애플리케이션에 대한 확장성과 보안을 제공
- Fargate
    - Amazon EC2 인스턴스의 서버나 클러스터를 관리할 필요 없이 컨테이너를 실행하기 위해 Amazon ECS에 사용할 수 있는 기술로, Fargate를 사용하면 컨테이너를 실행하기 위해 가상 머신의 클러스터를 프로비저닝, 구성 또는 조정할 필요X
    - 서버 유형을 선택하거나, 클러스터를 조정할 시점을 결정하거나, 클러스터 패킹을 최적화할 필요X
    - Fargate 시작 유형 또는 Fargate 용량 공급자를 사용하여 Amazon ECS 태스크와 서비스를 실행할 때는 애플리케이션을 컨테이너에 패키징하고, 운영 체제, CPU 및 메모리 요구 사항을 지정한 다음, 네트워킹 및 IAM 정책을 정의하고, 애플리케이션을 시작하며, 각 Fargate 태스크에는 자체 격리 경계가 존재하고 다른 태스크와 기본 커널, CPU 리소스, 메모리 리소스 또는 탄력적 네트워크 인터페이스를 공유하지 않음
